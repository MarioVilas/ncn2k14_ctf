El fichero no tiene extension, pero al identificarlo con el comando "file" nos da que es gzip y el nombre original.

$ file ctf
ctf: gzip compressed data, was "ctf.py", from Unix, last modified: Thu Jul 24 18:42:37 2014

$ mv ctf ctf.py.gz
$ gzip -d ctf.py.gz
$ file ctf.py
ctf.py: Python script, ASCII text executable

Al examinar el codigo fuente vemos que esta codificado con ROT-13.

$ head ctf.py -n 2
#!/usr/bin/env python
# -*- coding: rot13 -*-

Ejecutarlo nos da esta salida:

$ python ctf.py
Nope!

Por lo que toca mirar el codigo para ver que va mal. Lo decodificamos:

$ python
Python 2.7.3 (default, Mar 13 2014, 11:03:55) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> d=open("ctf.py","rU").read().decode("rot13")
>>> d=d.replace('.decode("ebg13")', '')
>>> open("ctf_decoded.py", "w").write(d)
>>> exit()

Ya podemos leer el codigo fuente...

--------------------------------------------------------------------------------
#!/hfe/ova/rai clguba
# -*- pbqvat: ebg13 -*-
import os
import marshal
import new

global flag

def f():
    global flag
    flag = "Nope!"

bytecode = """
YwAAAAAAAAAAAwAAAEAAAABzlwAAAGQAAGQBAGwAAG0BAFoBAAFkAABkAgBsAgBtAwBaAwABZQMA
ZAMAZAQAgwIAZAUAawIAcpMAZAYAYQQAdAQAZAcAN2EEAHQEAGQIADdhBAB0BABkCQA3YQQAdAQA
agUAZAoAZAQAgwIAYQQAdAQAagYAZAsAgwEAYQQAZAwAZQEAdAQAgwEAagcAgwAAF2EEAG4AAGQN
AFMoDgAAAGn/////KAEAAABzBAAAAHNoYTEoAQAAAHMGAAAAZ2V0ZW52cwsAAABOT19DT05fTkFN
RXMAAAAAcwEAAABZczEAAAAgNTcgNjggNjEgNzQgMjAgNjkgNzMgMjAgNzQgNjggNjUgMjAgNjEg
NjkgNzIgMmQgczEAAAAgNzMgNzAgNjUgNjUgNjQgMjAgNzYgNjUgNmMgNmYgNjMgNjkgNzQgNzkg
MjAgNmYgczEAAAAgNjYgMjAgNjEgNmUgMjAgNzUgNmUgNmMgNjEgNjQgNjUgNmUgMjAgNzMgNzcg
NjEgcxAAAAAgNmMgNmMgNmYgNzcgM2YgcwEAAAAgcwMAAABoZXhzAwAAAE5DTk4oCAAAAHMHAAAA
aGFzaGxpYnMEAAAAc2hhMXMCAAAAb3NzBgAAAGdldGVudnMEAAAAZmxhZ3MHAAAAcmVwbGFjZXMG
AAAAZGVjb2RlcwkAAABoZXhkaWdlc3QoAAAAACgAAAAAKAAAAABzCAAAADxzdHJpbmc+cwgAAAA8
bW9kdWxlPgIAAABzEgAAABABEAEVAgYBCgEKAQoBEgEPAQ==
"""

if __name__ != "__main__":
    codeobj = marshal.loads(bytecode)
    f = new.function(codeobj, globals(), "f", None, None)

f()

print flag
--------------------------------------------------------------------------------

Las dos primeras lineas nos quedaron mal decodificadas, pero no tiene importancia, funciona de todas maneras.

Se importan un par de modulos, se define una variable global "flag" que suponemos tendra el flag, una funcion "f" que lo define como "Nope!", una variable "bytecode" con un choclo larguisimo, un bloque de codigo que solo se ejecuta al importar como modulo (y no al ejecutar como script), luego se llama a la funcion "f" y se imprime el flag.

Claramente la clave esta en el churro de caracteres y el bloque condicional. Ejecutemos el modulo de esta manera:

$ python
Python 2.7.3 (default, Mar 13 2014, 11:03:55) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import ctf_decoded.py
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "ctf_decoded.py", line 26, in <module>
    codeobj = marshal.loads(bytecode)
ValueError: bad marshal data (unknown type code)
>>> 

Es el mismo error de antes. El codigo del bloque condicional vemos que decodifica la variable "bytecode" con el modulo "marshal", lo que nos dice que ese churro era una variable serializada. Luego se crea una funcion de Python al vuelo usando esa variable, lo que nos dice que es bytecode de Python. Pero esto no puede funcionar, porque se ve claramente que la variable "bytecode" esta codificada con base64... corregimos este nuevo error cambiando la linea:

    codeobj = marshal.loads(bytecode)

Por:

    codeobj = marshal.loads(bytecode.decode("base64"))

Y volvemos a ejecutar:

>>> import ctf_decoded
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "ctf_decoded.py", line 31, in <module>
    print flag
NameError: global name 'flag' is not defined

Algo mas esta roto! Esta vez nos tocara mirar que hay en ese bytecode misterioso. Para esto podemos usar el modulo "dis", un desensamblador que viene incorporado con el propio Python.

>>> bytecode = """
... YwAAAAAAAAAAAwAAAEAAAABzlwAAAGQAAGQBAGwAAG0BAFoBAAFkAABkAgBsAgBtAwBaAwABZQMA
... ZAMAZAQAgwIAZAUAawIAcpMAZAYAYQQAdAQAZAcAN2EEAHQEAGQIADdhBAB0BABkCQA3YQQAdAQA
... agUAZAoAZAQAgwIAYQQAdAQAagYAZAsAgwEAYQQAZAwAZQEAdAQAgwEAagcAgwAAF2EEAG4AAGQN
... AFMoDgAAAGn/////KAEAAABzBAAAAHNoYTEoAQAAAHMGAAAAZ2V0ZW52cwsAAABOT19DT05fTkFN
... RXMAAAAAcwEAAABZczEAAAAgNTcgNjggNjEgNzQgMjAgNjkgNzMgMjAgNzQgNjggNjUgMjAgNjEg
... NjkgNzIgMmQgczEAAAAgNzMgNzAgNjUgNjUgNjQgMjAgNzYgNjUgNmMgNmYgNjMgNjkgNzQgNzkg
... MjAgNmYgczEAAAAgNjYgMjAgNjEgNmUgMjAgNzUgNmUgNmMgNjEgNjQgNjUgNmUgMjAgNzMgNzcg
... NjEgcxAAAAAgNmMgNmMgNmYgNzcgM2YgcwEAAAAgcwMAAABoZXhzAwAAAE5DTk4oCAAAAHMHAAAA
... aGFzaGxpYnMEAAAAc2hhMXMCAAAAb3NzBgAAAGdldGVudnMEAAAAZmxhZ3MHAAAAcmVwbGFjZXMG
... AAAAZGVjb2RlcwkAAABoZXhkaWdlc3QoAAAAACgAAAAAKAAAAABzCAAAADxzdHJpbmc+cwgAAAA8
... bW9kdWxlPgIAAABzEgAAABABEAEVAgYBCgEKAQoBEgEPAQ==
... """
>>> import marshal
>>> import dis
>>> codeobj = marshal.loads(bytecode.decode("base64"))
>>> dis.disassemble(codeobj)
  2           0 LOAD_CONST               0 (-1)
              3 LOAD_CONST               1 (('sha1',))
              6 IMPORT_NAME              0 (hashlib)
              9 IMPORT_FROM              1 (sha1)
             12 STORE_NAME               1 (sha1)
             15 POP_TOP             

  3          16 LOAD_CONST               0 (-1)
             19 LOAD_CONST               2 (('getenv',))
             22 IMPORT_NAME              2 (os)
             25 IMPORT_FROM              3 (getenv)
             28 STORE_NAME               3 (getenv)
             31 POP_TOP             

  4          32 LOAD_NAME                3 (getenv)
             35 LOAD_CONST               3 ('NO_CON_NAME')
             38 LOAD_CONST               4 ('')
             41 CALL_FUNCTION            2
             44 LOAD_CONST               5 ('Y')
             47 COMPARE_OP               2 (==)
             50 POP_JUMP_IF_FALSE      147

  6          53 LOAD_CONST               6 (' 57 68 61 74 20 69 73 20 74 68 65 20 61 69 72 2d ')
             56 STORE_GLOBAL             4 (flag)

  7          59 LOAD_GLOBAL              4 (flag)
             62 LOAD_CONST               7 (' 73 70 65 65 64 20 76 65 6c 6f 63 69 74 79 20 6f ')
             65 INPLACE_ADD         
             66 STORE_GLOBAL             4 (flag)

  8          69 LOAD_GLOBAL              4 (flag)
             72 LOAD_CONST               8 (' 66 20 61 6e 20 75 6e 6c 61 64 65 6e 20 73 77 61 ')
             75 INPLACE_ADD         
             76 STORE_GLOBAL             4 (flag)

  9          79 LOAD_GLOBAL              4 (flag)
             82 LOAD_CONST               9 (' 6c 6c 6f 77 3f ')
             85 INPLACE_ADD         
             86 STORE_GLOBAL             4 (flag)

 10          89 LOAD_GLOBAL              4 (flag)
             92 LOAD_ATTR                5 (replace)
             95 LOAD_CONST              10 (' ')
             98 LOAD_CONST               4 ('')
            101 CALL_FUNCTION            2
            104 STORE_GLOBAL             4 (flag)

 11         107 LOAD_GLOBAL              4 (flag)
            110 LOAD_ATTR                6 (decode)
            113 LOAD_CONST              11 ('hex')
            116 CALL_FUNCTION            1
            119 STORE_GLOBAL             4 (flag)

 12         122 LOAD_CONST              12 ('NCN')
            125 LOAD_NAME                1 (sha1)
            128 LOAD_GLOBAL              4 (flag)
            131 CALL_FUNCTION            1
            134 LOAD_ATTR                7 (hexdigest)
            137 CALL_FUNCTION            0
            140 BINARY_ADD          
            141 STORE_GLOBAL             4 (flag)
            144 JUMP_FORWARD             0 (to 147)
        >>  147 LOAD_CONST              13 (None)
            150 RETURN_VALUE        

La parte importante es esta:

  3          16 LOAD_CONST               0 (-1)
             19 LOAD_CONST               2 (('getenv',))
             22 IMPORT_NAME              2 (os)
             25 IMPORT_FROM              3 (getenv)
             28 STORE_NAME               3 (getenv)
             31 POP_TOP             

  4          32 LOAD_NAME                3 (getenv)
             35 LOAD_CONST               3 ('NO_CON_NAME')
             38 LOAD_CONST               4 ('')
             41 CALL_FUNCTION            2
             44 LOAD_CONST               5 ('Y')
             47 COMPARE_OP               2 (==)
             50 POP_JUMP_IF_FALSE      147

Este desensamblado equivale algo con esta pinta:

    from os import getenv
    if getenv('NO_CON_NAME') == 'Y':
        # resto del codigo...

Es decir que necesitamos definir la variable de entorno NO_CON_NAME con el valor Y para que pase algo. Lo hacemos:

$ NO_CON_NAME=Y python
Python 2.7.3 (default, Mar 13 2014, 11:03:55) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import ctf_decoded
NCN6ceeeff26e72a40b71e6029a7149ad0626fcf310

Y aqui obtenemos ya el flag correcto. :)

Una forma alternativa de resolverlo sin usar el desensamblador de Python es simplemente mirar el bytecode y tratar de adivinar lo que hace:

>>> bytecode = """
... YwAAAAAAAAAAAwAAAEAAAABzlwAAAGQAAGQBAGwAAG0BAFoBAAFkAABkAgBsAgBtAwBaAwABZQMA
... ZAMAZAQAgwIAZAUAawIAcpMAZAYAYQQAdAQAZAcAN2EEAHQEAGQIADdhBAB0BABkCQA3YQQAdAQA
... agUAZAoAZAQAgwIAYQQAdAQAagYAZAsAgwEAYQQAZAwAZQEAdAQAgwEAagcAgwAAF2EEAG4AAGQN
... AFMoDgAAAGn/////KAEAAABzBAAAAHNoYTEoAQAAAHMGAAAAZ2V0ZW52cwsAAABOT19DT05fTkFN
... RXMAAAAAcwEAAABZczEAAAAgNTcgNjggNjEgNzQgMjAgNjkgNzMgMjAgNzQgNjggNjUgMjAgNjEg
... NjkgNzIgMmQgczEAAAAgNzMgNzAgNjUgNjUgNjQgMjAgNzYgNjUgNmMgNmYgNjMgNjkgNzQgNzkg
... MjAgNmYgczEAAAAgNjYgMjAgNjEgNmUgMjAgNzUgNmUgNmMgNjEgNjQgNjUgNmUgMjAgNzMgNzcg
... NjEgcxAAAAAgNmMgNmMgNmYgNzcgM2YgcwEAAAAgcwMAAABoZXhzAwAAAE5DTk4oCAAAAHMHAAAA
... aGFzaGxpYnMEAAAAc2hhMXMCAAAAb3NzBgAAAGdldGVudnMEAAAAZmxhZ3MHAAAAcmVwbGFjZXMG
... AAAAZGVjb2RlcwkAAABoZXhkaWdlc3QoAAAAACgAAAAAKAAAAABzCAAAADxzdHJpbmc+cwgAAAA8
... bW9kdWxlPgIAAABzEgAAABABEAEVAgYBCgEKAQoBEgEPAQ==
... """
>>> print repr(bytecode.decode("base64"))
'c\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x97\x00\x00\x00d\x00\x00d\x01\x00l\x00\x00m\x01\x00Z\x01\x00\x01d\x00\x00d\x02\x00l\x02\x00m\x03\x00Z\x03\x00\x01e\x03\x00d\x03\x00d\x04\x00\x83\x02\x00d\x05\x00k\x02\x00r\x93\x00d\x06\x00a\x04\x00t\x04\x00d\x07\x007a\x04\x00t\x04\x00d\x08\x007a\x04\x00t\x04\x00d\t\x007a\x04\x00t\x04\x00j\x05\x00d\n\x00d\x04\x00\x83\x02\x00a\x04\x00t\x04\x00j\x06\x00d\x0b\x00\x83\x01\x00a\x04\x00d\x0c\x00e\x01\x00t\x04\x00\x83\x01\x00j\x07\x00\x83\x00\x00\x17a\x04\x00n\x00\x00d\r\x00S(\x0e\x00\x00\x00i\xff\xff\xff\xff(\x01\x00\x00\x00s\x04\x00\x00\x00sha1(\x01\x00\x00\x00s\x06\x00\x00\x00getenvs\x0b\x00\x00\x00NO_CON_NAMEs\x00\x00\x00\x00s\x01\x00\x00\x00Ys1\x00\x00\x00 57 68 61 74 20 69 73 20 74 68 65 20 61 69 72 2d s1\x00\x00\x00 73 70 65 65 64 20 76 65 6c 6f 63 69 74 79 20 6f s1\x00\x00\x00 66 20 61 6e 20 75 6e 6c 61 64 65 6e 20 73 77 61 s\x10\x00\x00\x00 6c 6c 6f 77 3f s\x01\x00\x00\x00 s\x03\x00\x00\x00hexs\x03\x00\x00\x00NCNN(\x08\x00\x00\x00s\x07\x00\x00\x00hashlibs\x04\x00\x00\x00sha1s\x02\x00\x00\x00oss\x06\x00\x00\x00getenvs\x04\x00\x00\x00flags\x07\x00\x00\x00replaces\x06\x00\x00\x00decodes\t\x00\x00\x00hexdigest(\x00\x00\x00\x00(\x00\x00\x00\x00(\x00\x00\x00\x00s\x08\x00\x00\x00<string>s\x08\x00\x00\x00<module>\x02\x00\x00\x00s\x12\x00\x00\x00\x10\x01\x10\x01\x15\x02\x06\x01\n\x01\n\x01\n\x01\x12\x01\x0f\x01'

Se ven claramente las cadenas "getenv" y "NO_CON_NAME", pero "Y" es mas dificil de distinguir, podemos no darnos cuenta de que esta ahi. Sin embargo, se ven otras cadenas interesantes como "hex", "sha1", "hexdigest", y algo que parecen unas secuencias de caracteres hexadecimales:

    57 68 61 74 20 69 73 20 74 68 65 20 61 69 72 2d
    73 70 65 65 64 20 76 65 6c 6f 63 69 74 79 20 6f
    66 20 61 6e 20 75 6e 6c 61 64 65 6e 20 73 77 61
    6c 6c 6f 77 3f

Si las decodificamos, nos queda esta cadena en ASCII:

    What is the air-speed velocity of an unladen swallow?

Y si sacamos el SHA1 de esta cadena, es el mismo que aparece en el flag.

>>> import hashlib
>>> hashlib.sha1('What is the air-speed velocity of an unladen swallow?').hexdigest()
'6ceeeff26e72a40b71e6029a7149ad0626fcf310'

